//
// Utilities
// Extends default Bootstrap utility classes
// Classes with a purpose to reduce the frequency of
// highly repetitive declarations
// --------------------------------------------------

@import "bootstrap/scss/functions";
@import "bootstrap/scss/variables";
@import "bootstrap/scss/maps";
@import "bootstrap/scss/mixins";
@import "bootstrap/scss/utilities";

$utilities: map-merge(
    $utilities,
    (
        // Position
        "position":
            (
                property: position,
                responsive: true,
                values: static relative absolute fixed sticky,
            ),

        // Border colors
        "border-color":
            (
                property: border-color,
                class: border,
                values: $border-colors,
            ),

        // Background colors
        "background-color":
            map-merge(
                map-get($utilities, "background-color"),
                (
                    values:
                        map-merge(
                            map-get(map-get($utilities, "background-color"), "values"),
                            (
                                "secondary": $gray-100,
                                "dark": $gray-900,
                                "black": $black,
                                "none": transparent,
                            )
                        ),
                )
            ),
        // Background faded colors
        "background-faded-color":
            (
                property: background-color,
                class: bg-faded,
                values: $theme-faded-colors,
            ),

        // Background size
        "background-size":
            (
                property: background-size,
                class: bg-size,
                values: (
                    cover: cover,
                    contain: contain,
                ),
            ),

        // Background position
        "background-position":
            (
                property: background-position,
                class: bg-position,
                values: (
                    "center": center,
                    "center-y": left center,
                    "center-x": center top,
                    "top-end": top right,
                    "top-start": top left,
                    "top-center": top center,
                    "center-end": center right,
                    "center-start": center left,
                    "center-bottom": center bottom,
                    "bottom-end": bottom right,
                    "bottom-start": bottom left,
                    "bottom-center": bottom center,
                ),
            ),

        // Background repeat
        "background-repeat":
            (
                property: background-repeat,
                class: bg-repeat,
                values: (
                    0: no-repeat,
                    x: repeat-x,
                    y: repeat-y,
                ),
            ),

        // Background attachment
        "background-attachment":
            (
                property: background-attachment,
                class: bg-attachment,
                values: fixed,
            ),

        // Gradient background
        "background-gradient":
            (
                property: background,
                class: bg-gradient,
                values: $theme-gradients,
            ),

        // Disble background image
        "background-image":
            (
                property: background-image,
                class: bg-image,
                values: none,
            ),

        // Box shadow
        "shadow":
            (
                property: box-shadow,
                class: shadow,
                values: (
                    null: $box-shadow,
                    sm: $box-shadow-sm,
                    lg: $box-shadow-lg,
                    none: none,
                    "primary": $box-shadow-primary,
                    "secondary": $box-shadow-secondary,
                    "info": $box-shadow-info,
                    "success": $box-shadow-success,
                    "warning": $box-shadow-warning,
                    "danger": $box-shadow-danger,
                    "dark": $box-shadow-dark,
                ),
            ),

        // Border on the sides
        "border":
            (
                property: border,
                responsive: true,
                values: (
                    null: var(--#{$prefix}border-width) var(--#{$prefix}border-style)
                        var(--#{$prefix}border-color),
                    0: 0,
                ),
            ),

        "border-top": (
            property: border-top,
            responsive: true,
            values: (
                null: var(--#{$prefix}border-width) var(--#{$prefix}border-style)
                    var(--#{$prefix}border-color),
                0: 0,
            ),
        ),

        "border-end": (
            property: border-right,
            responsive: true,
            class: border-end,
            values: (
                null: var(--#{$prefix}border-width) var(--#{$prefix}border-style)
                    var(--#{$prefix}border-color),
                0: 0,
            ),
        ),

        "border-bottom": (
            property: border-bottom,
            responsive: true,
            values: (
                null: var(--#{$prefix}border-width) var(--#{$prefix}border-style)
                    var(--#{$prefix}border-color),
                0: 0,
            ),
        ),

        "border-start": (
            property: border-left,
            responsive: true,
            class: border-start,
            values: (
                null: var(--#{$prefix}border-width) var(--#{$prefix}border-style)
                    var(--#{$prefix}border-color),
                0: 0,
            ),
        ),

        // Rounded top: 0
        "rounded-top":
            map-merge(
                map-get($utilities, "rounded-top"),
                (
                    values:
                        map-merge(
                            map-get(map-get($utilities, "rounded-top"), "values"),
                            (
                                0: 0,
                            )
                        ),
                )
            ),
        // Rounded end: 0
        "rounded-end":
            map-merge(
                map-get($utilities, "rounded-end"),
                (
                    values:
                        map-merge(
                            map-get(map-get($utilities, "rounded-end"), "values"),
                            (
                                0: 0,
                            )
                        ),
                )
            ),
        // Rounded bottom: 0
        "rounded-bottom":
            map-merge(
                map-get($utilities, "rounded-bottom"),
                (
                    values:
                        map-merge(
                            map-get(map-get($utilities, "rounded-bottom"), "values"),
                            (
                                0: 0,
                            )
                        ),
                )
            ),
        // Rounded start: 0
        "rounded-start":
            map-merge(
                map-get($utilities, "rounded-start"),
                (
                    values:
                        map-merge(
                            map-get(map-get($utilities, "rounded-start"), "values"),
                            (
                                0: 0,
                            )
                        ),
                )
            ),
        // Width
        "width":
            map-merge(
                map-get($utilities, "width"),
                (
                    responsive: true,
                    values:
                        map-merge(
                            map-get(map-get($utilities, "width"), "values"),
                            (
                                1: 1px,
                                2: 2px,
                                3: 3px,
                                33: 33.33%,
                                auto: auto,
                            )
                        ),
                )
            ),
        // Height
        "height":
            map-merge(
                map-get($utilities, "height"),
                (
                    values:
                        map-merge(
                            map-get(map-get($utilities, "height"), "values"),
                            (
                                1: 1px,
                                auto: auto,
                            )
                        ),
                )
            ),
        // Opacity
        "opacity":
            (
                property: opacity,
                class: opacity,
                values: (
                    8: 0.08,
                    10: 0.1,
                    15: 0.15,
                    25: 0.25,
                    35: 0.35,
                    40: 0.4,
                    50: 0.5,
                    60: 0.6,
                    70: 0.7,
                    75: 0.75,
                    80: 0.8,
                    90: 0.9,
                    100: 1,
                ),
            ),

        // Text color
        "color":
            (
                property: color,
                class: text,
                values:
                    map-merge(
                        $theme-colors,
                        (
                            "white": $white,
                            "body": $body-color,
                            "muted": $text-muted,
                            "nav": $nav-link-color,
                            "border": $border-color,
                            "reset": inherit,
                        )
                    ),
            ),

        // Font weight
        "font-weight":
            map-merge(
                map-get($utilities, "font-weight"),
                (
                    values:
                        map-merge(
                            map-get(map-get($utilities, "font-weight"), "values"),
                            (
                                500: 500,
                                medium: $font-weight-medium,
                                semibold: $font-weight-semibold,
                            )
                        ),
                )
            ),
        // Text shadow
        "text-shadow":
            (
                property: text-shadow,
                values: (
                    null: $text-shadow,
                ),
            ),

        // Table layout
        "table-layout":
            (
                property: table-layout,
                values: fixed,
            ),

        // Z-index
        "z-index":
            (
                property: z-index,
                class: zindex,
                values: 1 2 3 4 5,
            ),

        // Update default Bootstrap graident
        "gradient":
            (
                property: background-image,
                class: bg,
                values: (
                    gradient: linear-gradient(180deg, rgba($white, 0.18), rgba($white, 0)),
                ),
            ),

        // Traslate
        "translate-middle":
            (
                property: transform,
                class: translate,
                responsive: true,
                values: (
                    middle: translate(-50%, -50%),
                    middle-x: translateX(-50%),
                    middle-y: translateY(-50%),
                ),
            ),

        // Minimum viewport height
        "min-viewport-height":
            (
                property: min-height,
                class: min-vh,
                responsive: true,
                values: (
                    25: 25vh,
                    50: 50vh,
                    75: 75vh,
                    100: 100vh,
                ),
            ),

        // Minimum viewport width
        "min-viewport-width":
            (
                property: min-width,
                class: min-vw,
                responsive: true,
                values: (
                    25: 25vh,
                    50: 50vh,
                    75: 75vh,
                    100: 100vh,
                ),
            ),

        // Maximum viewport height
        "max-viewport-height":
            (
                property: max-height,
                class: max-vh,
                responsive: true,
                values: (
                    25: 25vh,
                    50: 50vh,
                    75: 75vh,
                    100: 100vh,
                ),
            ),

        // Maximum viewport width
        "max-viewport-width":
            (
                property: max-width,
                class: max-vw,
                responsive: true,
                values: (
                    25: 25vh,
                    50: 50vh,
                    75: 75vh,
                    100: 100vh,
                ),
            ),
        "line-height": (
            property: line-height,
            class: line-h,
            responsive: true,
            values: (
                0: 0,
                1: 1,
                2: 2,
                3: 3,
                4: 4,
                5: 5,
            ),
        ),
        "text-wrap": (
            responsive: true,
            property: white-space,
            class: text,
            values: (
                wrap: normal,
                nowrap: nowrap,
            ),
        ),
        // Object-fit utility
        "object-fit":
            (
                property: object-fit,
                class: object-fit,
                responsive: true,
                values: (
                    contain: contain,
                    cover: cover,
                    fill: fill,
                    scale-down: scale-down,
                    none: none,
                ),
            ),

        // Object-position utility
        "object-position":
            (
                property: object-position,
                class: object-position,
                responsive: true,
                values: (
                    center: center,
                    top: top,
                    right: right,
                    bottom: bottom,
                    left: left,
                ),
            ),

        // Square utility
        "square":
            (
                property: width height,
                class: square,
                responsive: true,
                values: (
                    10: 10px,
                    25: 25px,
                    50: 50px,
                    75: 75px,
                    100: 100px,
                ),
            ),
        "cursor": (
            property: cursor,
            class: cursor,
            values: (
                alias: alias,
                all-scroll: all-scroll,
                auto: auto,
                cell: cell,
                context-menu: context-menu,
                copy: copy,
                crosshair: crosshair,
                default: default,
                e-resize: e-resize,
                ew-resize: ew-resize,
                grab: grab,
                grabbing: grabbing,
                help: help,
                move: move,
                n-resize: n-resize,
                ne-resize: ne-resize,
                nesw-resize: nesw-resize,
                no-drop: no-drop,
                none: none,
                not-allowed: not-allowed,
                ns-resize: ns-resize,
                nw-resize: nw-resize,
                nwse-resize: nwse-resize,
                pointer: pointer,
                progress: progress,
                row-resize: row-resize,
                s-resize: s-resize,
                se-resize: se-resize,
                sw-resize: sw-resize,
                text: text,
                vertical-text: vertical-text,
                w-resize: w-resize,
                wait: wait,
                zoom-in: zoom-in,
                zoom-out: zoom-out,
            ),
        ),
        "overflow-y": (
            property: overflow-y,
            class: overflow-y,
            responsive: true,
            values: (
                auto: auto,
                hidden: hidden,
                visible: visible,
                scroll: scroll,
            ),
        ),
        "overflow-x": (
            property: overflow-x,
            class: overflow-x,
            responsive: true,
            values: (
                auto: auto,
                hidden: hidden,
                visible: visible,
                scroll: scroll,
            ),
        )
    )
);

// Gradient text

.text-gradient-primary {
    background: linear-gradient(to right, $primary, #8b5cf6, #d946ef);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
}

.flex-center {
    display: flex;
    justify-content: center;
    align-items: center;
}
.container-fluid {
    @each $breakpoint, $max-width in $container-max-widths {
        @media (min-width: map-get($grid-breakpoints, #{$breakpoint})) {
            max-width: $max-width;
        }
    }
}

.flex-row-col {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;

    @include media-breakpoint-up(md) {
        gap: 0;
    }

    @include media-breakpoint-up(md) {
        > *:nth-child(n + 3) {
            margin-top: 1rem;
        }
    }

    @include media-breakpoint-up(lg) {
        > *:nth-child(n + 4) {
            margin-top: 1rem;
        }
    }

    @include media-breakpoint-up(xl) {
        > *:nth-child(n + 5) {
            margin-top: 1rem;
        }
    }

    &.col-border {
        @include media-breakpoint-up(md) {
            > [class*="col-md-4"] {
                &:nth-child(3n + 1) {
                    border-left: none;
                }
                &:not(:nth-child(3n + 1)) {
                    border-left: $border-width solid $border-color;
                }
            }
        }

        @include media-breakpoint-up(md) {
            > [class*="col-md-6"] {
                &:nth-child(odd) {
                    border-left: none;
                }
                &:nth-child(even) {
                    border-left: $border-width solid $border-color;
                }
            }
        }

        @include media-breakpoint-up(lg) {
            > [class*="col-lg-4"] {
                &:nth-child(3n + 1) {
                    border-left: none;
                }
                &:not(:nth-child(3n + 1)) {
                    border-left: $border-width solid $border-color;
                }
            }
        }

        @include media-breakpoint-up(xl) {
            > [class*="col-xl-3"] {
                &:nth-child(4n + 1) {
                    border-left: none;
                }
                &:not(:nth-child(4n + 1)) {
                    border-left: $border-width solid $border-color;
                }
            }
        }
    }
}

.row-col {
    > [class*="col-"] {
        margin-top: 0;
    }

    @include media-breakpoint-up(md) {
        > [class*="col-"]:nth-child(n + 3) {
            margin-top: 1rem;
        }
    }

    @include media-breakpoint-up(lg) {
        > [class*="col-"]:nth-child(n + 3) {
            margin-top: 0;
        }
        > [class*="col-"]:nth-child(n + 4) {
            margin-top: 1rem;
        }
    }

    @include media-breakpoint-up(xl) {
        > [class*="col-"]:nth-child(n + 4) {
            margin-top: 0;
        }
        > [class*="col-"]:nth-child(n + 5) {
            margin-top: 1rem;
        }
    }

    &.col-border {
        @include media-breakpoint-up(md) {
            > [class*="col-md-6"] {
                &:nth-child(odd) {
                    border-left: none;
                }
                &:nth-child(even) {
                    border-left: $border-width solid $border-color;
                }
            }
        }

        @include media-breakpoint-up(lg) {
            > [class*="col-lg-4"] {
                &:nth-child(3n + 1) {
                    border-left: none;
                }
                &:not(:nth-child(3n + 1)) {
                    border-left: $border-width solid $border-color;
                }
            }
        }

        @include media-breakpoint-up(xl) {
            > [class*="col-xl-3"] {
                &:nth-child(4n + 1) {
                    border-left: none;
                }
                &:not(:nth-child(4n + 1)) {
                    border-left: $border-width solid $border-color;
                }
            }
        }
    }
}
